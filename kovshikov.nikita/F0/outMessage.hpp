#ifndef OUTMESSAGE_HPP
#define OUTMESSAGE_HPP
#include <iostream>

void outDescription(std::ostream& out)
{
  out << "help - " << "Выводит список доступных команд и их ";
  out << "описание на русском языке" << "\n\n";
  out << "create <graphname> - " << "Создает пустой граф с ";
  out << "именем graphname" << "\n\n";
  out << "create <count> <graphname> - " << "Создает неориентированный";
  out << " граф graphname с заданным ";
  out << "количеством вершин count, в этом графе вершины связаны";
  out << " между собой(т.е. между любыми ";
  out << "двумя вершинами есть два противонаправленных ребра ";
  out << "с весом 1)" << "\n\n";
  out << "lonely <graphname> <count> - " << "Создает полностью ";
  out << "несвязный граф graphname из count";
  out << " вершин" << "\n\n";
  out << "list - " << "Выводит список графов на одной строке" << "\n\n";
  out << "output <graphname> - " << "Выводит указанный в параметре граф";
  out << ", если графа нет, то ";
  out << "выводится сообщение «введенный граф отсутствует»" << "\n\n";
  out << "delete < graphname > - " << "Удаляет указанный граф, если имя";
  out << " введено не правильно, ";
  out << "то выводится сообщение об ошибке: «данного графа не существует»";
  out << "\n\n";
  out << "work < graphname > - " << "Начинает работу с указанным графом, ";
  out << "если указанного графа нет,";
  out << " то создается автоматически пустой граф с именем graphname , все";
  out << " последующие команды ";
  out << "следуют только после этой (9-23), для прекращения взаимодействия";
  out << " с графом нужно ввести ";
  out << "пустую строку." << "\n\n";
  out << "graphname - " << "Выводит имя графа, над которым ведется работа";
  out << "\n\n";
  out << "add <namevertex>  <vertex> - " << "Создает вершину (где vertex";
  out << " ключ, по которому хранится ";
  out << "значение namevertex), не связанную ни с одной вершиной графа";
  out << "\n\n";
  out << "add <count><vertex><namevertex> - " << "Добавляет вершину в граф,";
  out << " связывая ее с ";
  out << "введенным количеством вершин одной связью, связь начинает с первой";
  out << " добавленной в граф ";
  out << "вершины, если count > количества вершин, то связь идет по второму";
  out << " кругу также начиная с ";
  out << "первой добавленной вершины и т.д." << "\n\n";
  out << "connect < num > < vertex1 > < vertex2 > - " << "Связывает вершину";
  out << " vertex1 с вершиной ";
  out << "vertex2 (где vertex1, vertex2 – ключи, по которым хранятся вершины)";
  out << " количеством связей";
  out << " num, если хотя бы одна вершина  отсутствует, то выводится";
  out << " сообщение: «минимум одна ";
  out << "вершина введена некорректно»" << "\n\n";
  out << "connect < vertex1 > < vertex2> - " << "Возвращает количество связей";
  out << " вершины vertex1 с ";
  out << "вершиной vertex2, в случае ввода хотя бы одной несуществующей";
  out << " вершины, выводится ";
  out << "сообщение об ошибке" << "\n\n";
  out << "double < num > < vertex1 > < vertex2 > - " << "Связывает обоюдной";
  out << " связью две вершины ";
  out << "количеством связей num, т.е. общее количество связей между ребрами";
  out << " 2 num, случай ";
  out << "некорректного ввода как в командах 12-13" << "\n\n";
  out << "double < vertex1 > < vertex2 > - " << "Проверяет связаны ли обе ";
  out << "вершины друг с другом ";
  out << "обоюдной связью и возвращает TRUE если да и FALSE в противном случае,";
  out << " при  ошибки ";
  out << "поведение такое же как в командах 12-13" << "\n\n";
  out << "delete  < vertex > - " << "Удаляет вершину, а также все связи где она";
  out << " фигурирует, если ";
  out << "введенной вершины нет, то выводится сообщение: «невозможно  удалить";
  out << " несуществующую ";
  out << "вершину»" << "\n\n";
  out << "delete < num > < vertex1 > < vertex 2 > - " << "Удаляет num связей";
  out << " вершины vertex1 с ";
  out << "вершиной vertex2 (при этом если vertex2 связана с vertex1, то это ребро";
  out << " остается и ";
  out << "его вес не изменяется), если num больше существующих связей, то выводится";
  out << " сообщение: ";
  out << "«запрашивается  удаление больших связей чем их существует», если одной из";
  out << " вершин не ";
  out << "существует то вывод ошибки как в командах 12-13" << "\n\n";
  out << "degree < vertex > - " << "Выводит степень вершины, т.е. количество вершин";
  out << " с которыми ";
  out << "связана данная вершина(считаются как выходящие ребра, так и входящие без";
  out << " учета их веса),";
  out << " если введенной вершины нет, то выводится сообщение: «данной вершины не";
  out << " существует»" << "\n\n";
  out << "weight < vertex > - " << "Выводит количество связей этой вершины с";
  out << " остальными";
  out << "(т.е. общий вес всех выходящий ребер), в случае ошибки поведение как с";
  out << " командой 18" << "\n\n";
  out << "own < vertex > - " << "Выводит количество связей всех вершин с данной(т.е.";
  out << " общий вес ";
  out << "всех входящий в данную вершину ребер), в случае ошибки поведение как с";
  out << " командой 18" << "\n\n";
  out << "vertex - " << "Выводит количество вершин в графе" << "\n\n";
  out << "edge - " << "Выводит количество ребер в графе(без учета веса)" << "\n\n";
  out << "change < num >  < vertex1 > < vertex2 > - " << "Меняет направление num";
  out << " ребер связи ";
  out << "вершины vertex1 с вершиной vertex2, если num больше чем существующих ";
  out << "связей, то ";
  out << "выводится сообщение: «вы запрашиваете изменение направления больших ";
  out << "связей чем их ";
  out << "есть», если одной из вершин не существует, то ошибка как в командах 12-13";
  out << "\n\n";
  out << "max - " << "выводит вершину с максимальной степенью" << "\n\n";
}

#endif
